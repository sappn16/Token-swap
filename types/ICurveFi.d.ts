/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ICurveFiInterface extends ethers.utils.Interface {
  functions: {
    "add_liquidity(uint256[4],uint256)": FunctionFragment;
    "balances(uint256)": FunctionFragment;
    "calc_token_amount(uint256[3],bool)": FunctionFragment;
    "calc_withdraw_one_coin(uint256,int128)": FunctionFragment;
    "coins(uint256)": FunctionFragment;
    "exchange(uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "get_dy(uint256,uint256,uint256)": FunctionFragment;
    "get_virtual_price()": FunctionFragment;
    "price_oracle()": FunctionFragment;
    "remove_liquidity(uint256,uint256[2])": FunctionFragment;
    "remove_liquidity_imbalance(uint256[2],uint256)": FunctionFragment;
    "remove_liquidity_one_coin(uint256,int128,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add_liquidity",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calc_token_amount",
    values: [[BigNumberish, BigNumberish, BigNumberish], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calc_withdraw_one_coin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "coins", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "get_dy",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_virtual_price",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "price_oracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity",
    values: [BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_imbalance",
    values: [[BigNumberish, BigNumberish], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_one_coin",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "add_liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calc_token_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calc_withdraw_one_coin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_dy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_virtual_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "price_oracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_imbalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_one_coin",
    data: BytesLike
  ): Result;

  events: {};
}

export class ICurveFi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ICurveFiInterface;

  functions: {
    "add_liquidity(uint256[4],uint256)"(
      amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "add_liquidity(uint256[2],uint256)"(
      amounts: [BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "add_liquidity(uint256[3],uint256)"(
      amounts: [BigNumberish, BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calc_token_amount(uint256[3],bool)"(
      _amounts: [BigNumberish, BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calc_token_amount(address,uint256[4],bool)"(
      _pool: string,
      _amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calc_token_amount(uint256[4],bool)"(
      _amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calc_token_amount(uint256[2],bool)"(
      _amounts: [BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calc_withdraw_one_coin(
      amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    coins(i: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "exchange(uint256,uint256,uint256,uint256,bool)"(
      from: BigNumberish,
      to: BigNumberish,
      _from_amount: BigNumberish,
      _min_to_amount: BigNumberish,
      use_eth: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exchange(int128,int128,uint256,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      _from_amount: BigNumberish,
      _min_to_amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "get_dy(uint256,uint256,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      _from_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "get_dy(int128,int128,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      _from_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    get_virtual_price(overrides?: CallOverrides): Promise<[BigNumber]>;

    price_oracle(overrides?: CallOverrides): Promise<[BigNumber]>;

    remove_liquidity(
      _amount: BigNumberish,
      amounts: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remove_liquidity_imbalance(
      amounts: [BigNumberish, BigNumberish],
      max_burn_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remove_liquidity_one_coin(
      _token_amount: BigNumberish,
      i: BigNumberish,
      min_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  "add_liquidity(uint256[4],uint256)"(
    amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    min_mint_amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "add_liquidity(uint256[2],uint256)"(
    amounts: [BigNumberish, BigNumberish],
    min_mint_amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "add_liquidity(uint256[3],uint256)"(
    amounts: [BigNumberish, BigNumberish, BigNumberish],
    min_mint_amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "calc_token_amount(uint256[3],bool)"(
    _amounts: [BigNumberish, BigNumberish, BigNumberish],
    _is_deposit: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calc_token_amount(address,uint256[4],bool)"(
    _pool: string,
    _amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    _is_deposit: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calc_token_amount(uint256[4],bool)"(
    _amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    _is_deposit: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calc_token_amount(uint256[2],bool)"(
    _amounts: [BigNumberish, BigNumberish],
    _is_deposit: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calc_withdraw_one_coin(
    amount: BigNumberish,
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  coins(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "exchange(uint256,uint256,uint256,uint256,bool)"(
    from: BigNumberish,
    to: BigNumberish,
    _from_amount: BigNumberish,
    _min_to_amount: BigNumberish,
    use_eth: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exchange(int128,int128,uint256,uint256)"(
    from: BigNumberish,
    to: BigNumberish,
    _from_amount: BigNumberish,
    _min_to_amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "get_dy(uint256,uint256,uint256)"(
    from: BigNumberish,
    to: BigNumberish,
    _from_amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "get_dy(int128,int128,uint256)"(
    from: BigNumberish,
    to: BigNumberish,
    _from_amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

  price_oracle(overrides?: CallOverrides): Promise<BigNumber>;

  remove_liquidity(
    _amount: BigNumberish,
    amounts: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remove_liquidity_imbalance(
    amounts: [BigNumberish, BigNumberish],
    max_burn_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remove_liquidity_one_coin(
    _token_amount: BigNumberish,
    i: BigNumberish,
    min_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "add_liquidity(uint256[4],uint256)"(
      amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "add_liquidity(uint256[2],uint256)"(
      amounts: [BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "add_liquidity(uint256[3],uint256)"(
      amounts: [BigNumberish, BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "calc_token_amount(uint256[3],bool)"(
      _amounts: [BigNumberish, BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calc_token_amount(address,uint256[4],bool)"(
      _pool: string,
      _amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calc_token_amount(uint256[4],bool)"(
      _amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calc_token_amount(uint256[2],bool)"(
      _amounts: [BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calc_withdraw_one_coin(
      amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coins(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "exchange(uint256,uint256,uint256,uint256,bool)"(
      from: BigNumberish,
      to: BigNumberish,
      _from_amount: BigNumberish,
      _min_to_amount: BigNumberish,
      use_eth: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "exchange(int128,int128,uint256,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      _from_amount: BigNumberish,
      _min_to_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "get_dy(uint256,uint256,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      _from_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "get_dy(int128,int128,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      _from_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

    price_oracle(overrides?: CallOverrides): Promise<BigNumber>;

    remove_liquidity(
      _amount: BigNumberish,
      amounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    remove_liquidity_imbalance(
      amounts: [BigNumberish, BigNumberish],
      max_burn_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    remove_liquidity_one_coin(
      _token_amount: BigNumberish,
      i: BigNumberish,
      min_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    "add_liquidity(uint256[4],uint256)"(
      amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "add_liquidity(uint256[2],uint256)"(
      amounts: [BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "add_liquidity(uint256[3],uint256)"(
      amounts: [BigNumberish, BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "calc_token_amount(uint256[3],bool)"(
      _amounts: [BigNumberish, BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calc_token_amount(address,uint256[4],bool)"(
      _pool: string,
      _amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calc_token_amount(uint256[4],bool)"(
      _amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calc_token_amount(uint256[2],bool)"(
      _amounts: [BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calc_withdraw_one_coin(
      amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coins(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "exchange(uint256,uint256,uint256,uint256,bool)"(
      from: BigNumberish,
      to: BigNumberish,
      _from_amount: BigNumberish,
      _min_to_amount: BigNumberish,
      use_eth: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exchange(int128,int128,uint256,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      _from_amount: BigNumberish,
      _min_to_amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "get_dy(uint256,uint256,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      _from_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "get_dy(int128,int128,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      _from_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

    price_oracle(overrides?: CallOverrides): Promise<BigNumber>;

    remove_liquidity(
      _amount: BigNumberish,
      amounts: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remove_liquidity_imbalance(
      amounts: [BigNumberish, BigNumberish],
      max_burn_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remove_liquidity_one_coin(
      _token_amount: BigNumberish,
      i: BigNumberish,
      min_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "add_liquidity(uint256[4],uint256)"(
      amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "add_liquidity(uint256[2],uint256)"(
      amounts: [BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "add_liquidity(uint256[3],uint256)"(
      amounts: [BigNumberish, BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calc_token_amount(uint256[3],bool)"(
      _amounts: [BigNumberish, BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calc_token_amount(address,uint256[4],bool)"(
      _pool: string,
      _amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calc_token_amount(uint256[4],bool)"(
      _amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calc_token_amount(uint256[2],bool)"(
      _amounts: [BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calc_withdraw_one_coin(
      amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coins(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exchange(uint256,uint256,uint256,uint256,bool)"(
      from: BigNumberish,
      to: BigNumberish,
      _from_amount: BigNumberish,
      _min_to_amount: BigNumberish,
      use_eth: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exchange(int128,int128,uint256,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      _from_amount: BigNumberish,
      _min_to_amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "get_dy(uint256,uint256,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      _from_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get_dy(int128,int128,uint256)"(
      from: BigNumberish,
      to: BigNumberish,
      _from_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_virtual_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price_oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remove_liquidity(
      _amount: BigNumberish,
      amounts: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remove_liquidity_imbalance(
      amounts: [BigNumberish, BigNumberish],
      max_burn_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remove_liquidity_one_coin(
      _token_amount: BigNumberish,
      i: BigNumberish,
      min_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
