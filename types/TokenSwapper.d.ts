/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TokenSwapperInterface extends ethers.utils.Interface {
  functions: {
    "_calculateBestRoute0(address,address,uint256)": FunctionFragment;
    "_calculateBestRoute1(address,address,uint256)": FunctionFragment;
    "addCurvePool(address,address,tuple)": FunctionFragment;
    "addTokenSupport(address)": FunctionFragment;
    "addUniswapV3Pool(address,address,tuple)": FunctionFragment;
    "calculateBestRoute(uint256)": FunctionFragment;
    "curvePools(address,address,uint256)": FunctionFragment;
    "executeSwap(uint256,tuple[],uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeCurvePool(address,address,uint256)": FunctionFragment;
    "removeUniswapV3Pool(address,address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "swapETHToUSDT(uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV3Pools(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_calculateBestRoute0",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_calculateBestRoute1",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addCurvePool",
    values: [
      string,
      string,
      { minter: string; isV2: boolean; i: BigNumberish; j: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenSupport",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addUniswapV3Pool",
    values: [string, string, { fee: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBestRoute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "curvePools",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSwap",
    values: [
      BigNumberish,
      {
        from: string;
        to: string;
        protocol: BigNumberish;
        index: BigNumberish;
      }[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeCurvePool",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUniswapV3Pool",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHToUSDT",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Pools",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_calculateBestRoute0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_calculateBestRoute1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCurvePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUniswapV3Pool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateBestRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "curvePools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCurvePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUniswapV3Pool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHToUSDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Pools",
    data: BytesLike
  ): Result;

  events: {
    "AddCurvePool(address,address,tuple)": EventFragment;
    "AddTokenSupport(address)": EventFragment;
    "AddUniswapV3Pool(address,address,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveCurvePool(address,address,tuple)": EventFragment;
    "RemoveUniswapV3Pool(address,address,tuple)": EventFragment;
    "TokenSwap(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCurvePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddTokenSupport"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddUniswapV3Pool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveCurvePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveUniswapV3Pool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSwap"): EventFragment;
}

export class TokenSwapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TokenSwapperInterface;

  functions: {
    _calculateBestRoute0(
      from: string,
      to: string,
      swapAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _calculateBestRoute1(
      from: string,
      to: string,
      swapAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addCurvePool(
      from: string,
      to: string,
      setting: {
        minter: string;
        isV2: boolean;
        i: BigNumberish;
        j: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTokenSupport(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addUniswapV3Pool(
      from: string,
      to: string,
      setting: { fee: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateBestRoute(
      ethAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    curvePools(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber] & {
        minter: string;
        isV2: boolean;
        i: BigNumber;
        j: BigNumber;
      }
    >;

    executeSwap(
      swapAmount: BigNumberish,
      path: {
        from: string;
        to: string;
        protocol: BigNumberish;
        index: BigNumberish;
      }[],
      minOutAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeCurvePool(
      from: string,
      to: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeUniswapV3Pool(
      from: string,
      to: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapETHToUSDT(
      ethAmount: BigNumberish,
      minUSDTAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV3Pools(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { fee: number }>;
  };

  _calculateBestRoute0(
    from: string,
    to: string,
    swapAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _calculateBestRoute1(
    from: string,
    to: string,
    swapAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addCurvePool(
    from: string,
    to: string,
    setting: {
      minter: string;
      isV2: boolean;
      i: BigNumberish;
      j: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTokenSupport(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addUniswapV3Pool(
    from: string,
    to: string,
    setting: { fee: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateBestRoute(
    ethAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  curvePools(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber] & {
      minter: string;
      isV2: boolean;
      i: BigNumber;
      j: BigNumber;
    }
  >;

  executeSwap(
    swapAmount: BigNumberish,
    path: {
      from: string;
      to: string;
      protocol: BigNumberish;
      index: BigNumberish;
    }[],
    minOutAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeCurvePool(
    from: string,
    to: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeUniswapV3Pool(
    from: string,
    to: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapETHToUSDT(
    ethAmount: BigNumberish,
    minUSDTAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV3Pools(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    _calculateBestRoute0(
      from: string,
      to: string,
      swapAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        ([string, string, number, BigNumber] & {
          from: string;
          to: string;
          protocol: number;
          index: BigNumber;
        })[]
      ] & {
        outAmount: BigNumber;
        path: ([string, string, number, BigNumber] & {
          from: string;
          to: string;
          protocol: number;
          index: BigNumber;
        })[];
      }
    >;

    _calculateBestRoute1(
      from: string,
      to: string,
      swapAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        ([string, string, number, BigNumber] & {
          from: string;
          to: string;
          protocol: number;
          index: BigNumber;
        })[]
      ] & {
        outAmount: BigNumber;
        path: ([string, string, number, BigNumber] & {
          from: string;
          to: string;
          protocol: number;
          index: BigNumber;
        })[];
      }
    >;

    addCurvePool(
      from: string,
      to: string,
      setting: {
        minter: string;
        isV2: boolean;
        i: BigNumberish;
        j: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    addTokenSupport(token: string, overrides?: CallOverrides): Promise<void>;

    addUniswapV3Pool(
      from: string,
      to: string,
      setting: { fee: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    calculateBestRoute(
      ethAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        ([string, string, number, BigNumber] & {
          from: string;
          to: string;
          protocol: number;
          index: BigNumber;
        })[]
      ] & {
        expectedUsdtAmount: BigNumber;
        path: ([string, string, number, BigNumber] & {
          from: string;
          to: string;
          protocol: number;
          index: BigNumber;
        })[];
      }
    >;

    curvePools(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber] & {
        minter: string;
        isV2: boolean;
        i: BigNumber;
        j: BigNumber;
      }
    >;

    executeSwap(
      swapAmount: BigNumberish,
      path: {
        from: string;
        to: string;
        protocol: BigNumberish;
        index: BigNumberish;
      }[],
      minOutAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeCurvePool(
      from: string,
      to: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeUniswapV3Pool(
      from: string,
      to: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    swapETHToUSDT(
      ethAmount: BigNumberish,
      minUSDTAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3Pools(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {
    AddCurvePool(
      from?: null,
      to?: null,
      setting?: null
    ): TypedEventFilter<
      [
        string,
        string,
        [string, boolean, BigNumber, BigNumber] & {
          minter: string;
          isV2: boolean;
          i: BigNumber;
          j: BigNumber;
        }
      ],
      {
        from: string;
        to: string;
        setting: [string, boolean, BigNumber, BigNumber] & {
          minter: string;
          isV2: boolean;
          i: BigNumber;
          j: BigNumber;
        };
      }
    >;

    AddTokenSupport(
      token?: null
    ): TypedEventFilter<[string], { token: string }>;

    AddUniswapV3Pool(
      from?: null,
      to?: null,
      setting?: null
    ): TypedEventFilter<
      [string, string, [number] & { fee: number }],
      { from: string; to: string; setting: [number] & { fee: number } }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RemoveCurvePool(
      from?: null,
      to?: null,
      setting?: null
    ): TypedEventFilter<
      [
        string,
        string,
        [string, boolean, BigNumber, BigNumber] & {
          minter: string;
          isV2: boolean;
          i: BigNumber;
          j: BigNumber;
        }
      ],
      {
        from: string;
        to: string;
        setting: [string, boolean, BigNumber, BigNumber] & {
          minter: string;
          isV2: boolean;
          i: BigNumber;
          j: BigNumber;
        };
      }
    >;

    RemoveUniswapV3Pool(
      from?: null,
      to?: null,
      setting?: null
    ): TypedEventFilter<
      [string, string, [number] & { fee: number }],
      { from: string; to: string; setting: [number] & { fee: number } }
    >;

    TokenSwap(
      from?: null,
      to?: null,
      amountIn?: null,
      amountOut?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { from: string; to: string; amountIn: BigNumber; amountOut: BigNumber }
    >;
  };

  estimateGas: {
    _calculateBestRoute0(
      from: string,
      to: string,
      swapAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _calculateBestRoute1(
      from: string,
      to: string,
      swapAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addCurvePool(
      from: string,
      to: string,
      setting: {
        minter: string;
        isV2: boolean;
        i: BigNumberish;
        j: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTokenSupport(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addUniswapV3Pool(
      from: string,
      to: string,
      setting: { fee: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateBestRoute(
      ethAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    curvePools(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeSwap(
      swapAmount: BigNumberish,
      path: {
        from: string;
        to: string;
        protocol: BigNumberish;
        index: BigNumberish;
      }[],
      minOutAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeCurvePool(
      from: string,
      to: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeUniswapV3Pool(
      from: string,
      to: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapETHToUSDT(
      ethAmount: BigNumberish,
      minUSDTAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV3Pools(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _calculateBestRoute0(
      from: string,
      to: string,
      swapAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _calculateBestRoute1(
      from: string,
      to: string,
      swapAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addCurvePool(
      from: string,
      to: string,
      setting: {
        minter: string;
        isV2: boolean;
        i: BigNumberish;
        j: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTokenSupport(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addUniswapV3Pool(
      from: string,
      to: string,
      setting: { fee: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateBestRoute(
      ethAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    curvePools(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeSwap(
      swapAmount: BigNumberish,
      path: {
        from: string;
        to: string;
        protocol: BigNumberish;
        index: BigNumberish;
      }[],
      minOutAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCurvePool(
      from: string,
      to: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeUniswapV3Pool(
      from: string,
      to: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapETHToUSDT(
      ethAmount: BigNumberish,
      minUSDTAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3Pools(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
